#+STARTUP: indent content
#+TITLE: TeX講習会

* DONE 元締めファイル
- State "DONE"       from ""           [2018-06-13 Wed 20:59]
#+BEGIN_SRC tex
\documentclass[a4paper, 11pt,fleqn]{jarticle}               % fleqn:  数式左寄せ

\usepackage[utf8]{inputenc}        % rtf 経由で word に出力する時に必要,  latex2rtfで日本語
\usepackage{booktabs}                    % 表に罫線を引くパッケージ
\usepackage{lscape}                              % 横向きのページを作るパッケージ
\usepackage{color}                              % 文字の色を変えるパッケージ
\usepackage{okumacro}                    % ルビをふるパッケージ
\usepackage{times}                         %  times: LaTex で Times New Roman
\usepackage{txfonts}                         % 数式で使うフォントの指定
\usepackage[margin=25mm,bottom=20mm,left=25mm, right=25mm]{geometry}          %  [LaTeX] 1ページ当たりの行数，文字数と周囲の余白を設定する


% ハイフネーションの禁止 -----
\hyphenpenalty=10000\relax
\exhyphenpenalty=10000\relax
\sloppy

\usepackage{subfiles} % 娘ファイルを独立にタイプセット可能にする

% 図表の挿入とキャプションの設定 -----
\usepackage{wrapfig}
\usepackage[dvipdfmx]{graphicx}
\usepackage{mediabb}
\renewcommand{\figurename}{Fig.}          % Latexで図表番号だけを英語で表記,  キャプションのスタイルを変更したい スタイルファイル
\renewcommand{\tablename}{Table }
\usepackage{here}          % 図を確実に入れ込むためのパッケージ here or float


% 引用に関する設定 -----
\usepackage{natbib}
\bibliographystyle{jecon}
\renewcommand{\refname}{引用文献}


% しおりとハイパーリンクを作るパッケージ -----
\AtBeginDvi{\special{pdf:tounicode 90ms-RKSJ-UCS2}}
\usepackage[dvipdfm,
                      bookmarks=true,
                      bookmarksnumbered=true,
                      bookmarkstype=toc,
                      colorlinks=true,
                      linkcolor=black,
                      citecolor=blue,
                      urlcolor=black,
                      pdfborder={0 0 0}]{hyperref}


\usepackage{ascmac}  % アイテムボックス用
\usepackage{fancybox}  % アイテムボックス用


% DRAFT マーク
%\usepackage{graphicx}
%\usepackage{color}
\usepackage{fancybox}
\fancyput(2.0cm, -18.0cm){
 \color[rgb]{0.85,0.85,0.85}{\rotatebox{50}{\scalebox{10}{DRAFT}}}}


% 行間の設定
\usepackage{setspace} % setspaceパッケージのインクルード
\setstretch{1.5} % ページ全体の行間を設定



% 関数の設定 //////////////////////////////////////////////////////

% 追加箇所 -----
\usepackage{color}
\definecolor{green}{rgb}{0, 0.6, 0}	% 緑色を再定義
\newcommand{\NS}[1]{\textcolor{green}{#1}}
\usepackage{listings, jlisting}
\usepackage{pxrubrica}
\graphicspath{{./figs/}}
\usepackage{subfigure}


% 共著者へのメッセージや自分へのメモ -----
\newcommand{\memo}[1]{{\footnotesize \textcolor{red}{[#1]}}}

%\renewcommand{\ttdefault}{cmtt}  % 等幅フォントの書体
\renewcommand{\figurename}{図}
\renewcommand{\tablename}{表}


% 当落線上の一文 -----
\newcommand{\reduce}[1]{\textcolor{magenta}{#1}}



%//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
\begin{document}                    % ここから文章開始

\title{\TeX 講習会}
\date{2018 年 4 月}
\author{中野　善、 林　晃}
\maketitle

\tableofcontents

\newpage
\subfile{Introduction}
\subfile{Preparation}
\subfile{Differences}
\subfile{Excercise_1}




\end{document}                    % ここで文章終り


#+END_SRC
* ASSIGNED 本講習の概要 [中野、10 分、9:00 ～ 9:10]
- State "ASSIGNED"   from ""           [2018-06-13 Wed 20:58] \\
  中野さん

#+BEGIN_SRC tex
\documentclass[TeXworkshop]{subfiles}
\begin{document}
\section{はじめに}

本講習会では、
\begin{itemize}
\item \TeX による事業報告書の編集ができるようになること
\item \TeX による論文の執筆に対する抵抗感を下げること
\end{itemize}
を目的としています。

本講習を受講される皆様におかれましては、事業報告書の執筆および編集作業、学術論文の執筆や研究費申請書の作成等、あらゆる種類の執筆を日夜行っていることと思います。
一般に編集・執筆作業では、そのエフォートのほとんどは「論理展開の構成」と「体裁の統一」に割かれます。
このうち \TeX は「体裁の統一」をサポートしてくれる強力なツールです。
つまり、私たちは \TeX を使うことで、文章作成上最も重要な「論理展開の構成」に集中できるようになるわけです。
\TeX と聞くと、なにやらハードルが高そうな印象を抱くかもしれませんが、触れてみると意外と易しい構造になっていることに気がつくはずです。
本講習では、\TeX の基本的な使い方を説明したのち、実際に編集・執筆作業を行っていただくことで、上に掲げた本講習の目的を達成したいと思います。

\end{document}
#+END_SRC
** 開会の挨拶

** 経緯説明

     * ゼミで発表したところ、講習会の要望があった
     * 事業報告書の編集作業の負担軽減
     * 資源評価報告書を将来的に TeX で作成
         * 体裁の統一が楽
         * 数値参照で間違え防止


** 目標
    * TeX による事業報告書の編集ができるようになること


* DONE Word とTeX の違い [林、20 分、9:10 ～ 9:30] [100%]
- State "DONE"       from "DONE"       [2018-06-28 Thu 06:55]
- State "DONE"       from "TODO"       [2018-06-28 Thu 06:49]
#+BEGIN_SRC tex :tangle ./Differences.tex
\documentclass[TeXworkshop]{subfiles}
\begin{document}
\clearpage

\section{\TeX のすゝめ}

\subsection{ワープロソフトの種類}
動作に着目すると、文書を作成するソフトウェアは大きく2タイプに分類することができます。
1つは、テキストの編集画面をほぼそのまま出力する\ruby{WYSIWYG}{ウィジウィグ}
[What You See Is What You \kenten{G}et]タイプ、
% フリガナ追加
もう1つは、文書の構造を明示的に定義して編集を行う
\ruby{WYSIWYM}{ウィジウィム} [What You See Is What You \kenten{M}ean]タイプです。
これら2タイプのソフトウェアは、得意とする作業が大きく異なっています。


私たちは、日々の研究活動や業務において様々な種類の文書を扱いますが、
その特性の大部分は文書の規模、構造化の程度や内容の反復度、数値データの数、相互参照や図表の数などによって決定されます。
品質要求を満たした文書を最短時間で作成するためには、
自身が作成しようとしている文書の特性を見極め、適切なタイプのソフトウェアを使用する必要があります。

それでは、これら2つのタイプの文書作成ソフトウェアは、どのように異なるのでしょうか。

\subsubsection{WYSIWYG}
WYSIWYGタイプのソフトウェアの中にも、シンプルなものから高機能なものまで様々ありますが、
ある程度の規模の文書を作成する場合には、
Microsoft Wordのように、図表の挿入から校正機能など、
多くの機能を備えた「オール・インワン」的なソフトウェアを使用することが多いようです
（表 \ref{table:differences}）。
これらはマウスを用いた直感的な操作性に優れているため、
使用開始初期の学習コストが低いのが特長です。


\subsubsection{WYSIWYM}
WYSIWYMタイプのソフトウェアでは、編集画面が見たままに出力されないため、
文書内の図表などの要素の位置をテキストで細かく指定したり、文章にさまざまな属性を与えることができます。
本講習で紹介する\TeX は、このWYSIWYMタイプのソフトウェアの代表格です。

\TeX では、目次や図表、索引、脚注、数式番号、文献などの参照も、
ファイル名や参照のための手がかりを埋め込んでおくことによって、容易に実現できます。
「○○ページを御覧ください」のような、特定ページの参照も可能です。
この方式をとっていることによって、\TeX で作成された文書は変更に強く、再現性を高く保つことができます（表 \ref{table:differences}）。
文書の体裁に注意力を削がれずに済むため、執筆者は残りの作業時間の大部分を文書内容の推敲に充てることができます。

\TeX は、変更を成果物に反映させるためにコンパイルを必要とします。
この作業によって、文書ファイル内に埋め込まれた体裁に関する命令や、
相互参照の手がかりを拾い集め、最終的な成果物を作成します。
コンパイルは一見、煩わしい手間に思えるかもしれませんが、\TeX はユーザーからの入力を常時監視せずに済みますし、
編集する文書自体はタネも仕掛けもない単なるプレーンテキストですので
\footnote{例えばMS Wordの \ttfamily{.docx}ファイルは仕掛けだらけで、本文が記述されたファイルの他に、\\
様々な設定やコンテンツファイル群がまとめられていますが、それらはあたかも一つのファイルであるかのように隠蔽されています。}、
大規模な文書を扱う際にも動作を軽快に保つことができます。

\begin{table}[h]
  \begin{center}
  \caption{Microsoft Wordと\TeX の長所の違い}
  \label{table:differences}
  \begin{tabular}{rcc}
                & Word & \TeX \\\hline
    機能の数              & $\circ$ & $\times$\\
    直感的操作            & $\circ$ & $\times$\\
    学習コスト            & $\circ$ & $\times$\\
    再現性                & $\times$ & $\circ$ \\
    相互参照              & $\times$ & $\circ$ \\
    大規模文書の扱いやすさ& $\times$ & $\circ$ \\\hline
  \end{tabular}
  \end{center}
\end{table}

\begin{itembox}[l]{メモ}
\TeX の隠れた特長に、仕上がりの美しさが挙げられます。
  これは、\TeX が単なるワープロソフトではなく、美しい文書を作成することを目的として開発された組版ソフトであるためです。
  \TeX の開発者であるDonald Knuth博士は、自著をあたかも組版職人によって組版されたかのように美しく仕上げたいと考え、1976年に\TeX の開発を始めました。
\end{itembox}

\subsection{報告書・論文作成には\TeX を}
WYSIWIG/WYSIWYM両タイプのソフトウェア(以下Microsoft Wordと\TeX）は場面に応じて適切に使い分けることが重要です。
このことを理解するために、万能包丁と蕎麦切り包丁のアナロジーを考えてみましょう。
料理（文書）の特性に合わせて、包丁（ソフトウェア）を使い分けるのは自然なことです。

今あなたが、ちょっと小腹が空いてしまったとします。
自分で食べるちょっとした一皿を、冷蔵庫にあるあり合わせの材料で、手早く美味しく作りたい、という状況で、蕎麦切り包丁を手にする人はいないでしょう。
こんな時には万能包丁の出番です。

では、あなたがお蕎麦屋さんの蕎麦打ち職人だったらどうでしょうか。
お客様にあなたの自慢の蕎麦を美味しく食べてもらうには、少なくとも麺は\kenten{均一}な太さでないといけません。
ここで使うべきは間違いなく蕎麦切り包丁で、あなたは店の個性を麺の味わいやコシ、太さなどで表現するはずです。

もうお気づきとは思いますが、「ちょっとした一皿と万能包丁」はちょっとした覚え書きとMicrosoft Wordの、
「自慢の蕎麦と蕎麦切り包丁」は報告書や学術論文と\TeX のアナロジーです。毎年、一定のフォーマットで提出する報告書、IMRAD型式の学術論文は、\TeX で作成しましょう。

\subsection{\TeX ファイルの構造}
\TeX で文書を作成するための\ttfamily{.tex}ファイルは大まかには2つの部分に分かれています。
1つは文書の構造や仕様を定義するための「プリアンブル」、
もう１つは実際に印刷される内容を執筆するための「ドキュメント」です（図\ref{fig:example_wagahai}）。
それぞれの役割を見ていきましょう。

\begin{figure}[H]
\begin{center}
\includegraphics[width=\textwidth,clip]{Example_wagahai.eps}
\caption{test}\label{fig:example_wagahai}
\end{center}
\end{figure}

\subsubsection{プリアンブル}
\ttfamily{.tex}ファイルを開いて最初に目に入る先頭部分がプリアンブルです（図\ref{fig:example_wagahai}の青色部分）。
プリアンブルは、その文書をどのような形の媒体で印刷するのかを設定する場所です。
図\ref{fig:example_wagahai}の1行目に書かれている
\verb|\documentclass{tarticle}|は、「この文書を縦書きのarticle型式の文書クラスで出力せよ」という命令です。
この\ttfamily{.tex}ファイルをコンパイルすると、図\ref{fig:tategaki}のような文書が出力されます。

\begin{figure}[H]
\begin{center}
\includegraphics[width=0.5\textwidth,clip]{tategaki.eps}
\caption{test}\label{fig:tategaki}
\end{center}
\end{figure}


小説らしいレイアウトですね。

ここで、プリアンブルの役割を理解するために、文書クラスを\ttfamily{"article"}に変更してみましょう（図\ref{fig:change_doc_class}(a)）。
コンパイルしてみると、図\ref{fig:change_doc_class} (b) のように、ただちに横書きの文書が出力されます。
\begin{figure}[htbp]
\centering
\subfigure[\ttfamily{.tex}ファイル]{
  \includegraphics[clip, width=0.45\textwidth]{yokogaki.eps}
  \label{fig:yokogaki_src}
}
\subfigure[出力]{
  \includegraphics[clip, width=0.45\textwidth]{yokogaki_output.eps}
  \label{fig:yokogaki_out}
}
\caption{文書クラスの変更例}
\label{fig:change_doc_class}
\end{figure}



このように、文書の仕様を指定するのがプリアンブルの役目です。




\subsubsection{ドキュメント}

\verb|\begin{document}|と\verb|\end{document}|に挟まれた部分を「ドキュメント」と呼びます。
実際の執筆作業のほとんどはこの部分で行います。

本文の執筆中、特定の箇所で書式を変更する必要が生じた場合、
\TeX では、バックスラッシュ（\textbackslash）\footnote{Windows環境の場合は円通貨記号}
や中括弧を用いた
「関数」を用いる決まりがあります。

「章」「節」などの文書の構造に関わる見出し
\footnote{
part、chapter、section、subsection、subsubsection、paragraph、subparagraph
などが利用可能です}
は、
\verb|\chapter{章の名前}|
\verb|\section{節の名前}|
などのように指定する決まりがあり、
それぞれのレベルに予め設定された書式が自動的に適用されます。

文書の構造に関係がない部分に書式を変更したい場合にも、
やはり関数が必要です（図\ref{fig:large_italic}）。
しかし、ドキュメント部でその都度関数を呼び出し、
書式をその場限りで変更するこのような方法は、
\TeX では推奨されていません。
それはなぜでしょうか。

\begin{figure}[htbp]
\centering
\subfigure[\ttfamily{.tex}ファイル]{
  \includegraphics[clip, width=0.45\textwidth]{large_italic.eps}
  \label{fig:large_italic_src}
}
\subfigure[出力]{
  \includegraphics[clip, width=0.45\textwidth]{large_italic_out.eps}
  \label{fig:large_italic_out}
}
\caption{その場限りのフォント変更}
\label{fig:large_italic}
\end{figure}
\clearpage

\subsubsection{\TeX らしい記法: マクロ}
文字を大きくしたい箇所が文書中に複数箇所ある場合を考えてみます（図\ref{fig:redundant}）。
\verb|{\LARGE ニャーニャー}|という面倒なタイピングを、
本文中であと何回繰り返すことになりそうでしょうか。
もし、この部分のフォントのサイズを変更したくなったら、
検索・置換作業を繰り返して設定を変更して回らねばなりません。

\begin{figure}[htbp]
\centering
\subfigure[\ttfamily{.tex}ファイル]{
  \includegraphics[clip, width=0.45\textwidth]{redundant.eps}
  \label{fig:redundant_src}
}
\subfigure[出力]{
  \includegraphics[clip, width=0.45\textwidth]{redundant_out.eps}
  \label{fig:redundant_out}
}\caption{そのばしのぎはあとが大変}
\label{fig:redundant}
\end{figure}

このような状況を回避するために、
\TeX ではプリアンブルにおけるマクロの定義（図\ref{fig:macro}）が推奨されています。
\begin{figure}[htbp]
\centering
  \includegraphics[clip, width=\textwidth]{macro.eps}
  \caption{マクロを利用したフォントの変更}
  \label{fig:macro}
\end{figure}
マクロはひとたび定義してしまえば、本文中で呼び出すことによって何度でも利用でき、
何よりもプリアンブルにおける定義を変更するだけで一括で設定を変更できるのが利点です。

\begin{itembox}[l]{コラム: \TeX 記法は面倒？}
本文のフォントや体裁を変更する場合、
「気軽さ」という観点では、\TeX はMS Wordには到底敵いません。
MS Wordではキーボードショートカットで瞬時に作業が完了するのに対し、
\TeX の関数は、入力に時間がかかる上、入力後も本文中でスペースを占め続けます。
このように、\TeX 記法は一見、時空間コストが高く思えるのですが、
この特性は文書の規模が大きくなるにつれ、むしろメリットに変化していきます。

メリットとしてなにをしようとしているのか

目立つ

\end{itembox}

\begin{itembox}[l]{コラム: タイトル}
ここまで示してきた図のプリアンブルに、
\verb|\title{吾輩は猫である}|
や
\verb|\author{夏目漱石}|
などの関数が書いてあったのにお気づきでしたでしょうか。
これは\TeX に標準で備わっているマクロの一種で、
ドキュメント部に\verb|\maketitle|と書くことで、
著者名や表題、日付が書かれたタイトルページが出力されます。
\end{itembox}

\end{document}

#+END_SRC

** DONE WYSIWYG と WYSIWYM 仕組みをかんたんに説明
- State "DONE"       from "TODO"       [2018-06-28 Thu 06:54]

** DONE 優劣ではなく使い分けるべきもの
- State "DONE"       from ""           [2018-06-28 Thu 06:54]

** DONE 作業画面の表示
- State "DONE"       from ""           [2018-06-28 Thu 06:54]
     * 画面の見方
     * プリアンブル部
     * ドキュメント部？

** DONE 関数の紹介
- State "DONE"       from ""           [2018-06-28 Thu 06:54]
    * パッケージの解説  使うには宣言する必要がある。
    * 一覧表配布
    * エラー集
    * 自作関数の解説  プリアンブルに書くライトなマクロ

* ASSIGNED 報告書編集作業の実習1 [中野、150 分、9:30 ～ 12:00]

* 報告書編集作業の実習2 [林、150 分、13:30 ～ 16:00] [0%]
[[/Users/ahayashi/Documents/GitHub/TeXworkshop/Exercise_2.tex]]
** ゼロから\TeXファイルを作る
*** 官公庁の事業報告書: \TeX を導入すべき好モデル
:PROPERTIES:
:EFFORT:   0:30
:END:
我々が執筆する文書の一つに，報告書というタイプの文書があります．
報告書は，まさに\TeXの導入が効果的なタイプの文書です．
報告書には，執筆者にとって負担となる，以下のような特徴があります．
- 分量・執筆者が多い
- 数値データが多い
- 図表が多い
- 数値の間違いが許されない
- 毎年出版される
これから，これらの特徴はどのような問題につながっており，
そして，それらの問題が\TeX の導入によって，どのように改善されるかを見ていきます．
**** 分量・執筆者が多い
期待される成果物の分量が多くなるほど，執筆・校閲のコストは当然高くなります．
多くの場合，執筆・校閲にあたる人員を増やして，作業を分担することになるでしょう．
しかし実は，短絡的な増員には弊害もあるのです．

文章のスタイルは人によって様々ですので，各執筆者が思い思いに書くと，まとまりのない文章になってしまうでしょう．
これに対処するために，編集担当者は，スタイルを指定するマニュアルを作ることを思いつくかもしれません．
しかしそれは，執筆担当者に，「マニュアルを読む」という，さらなる労働を課していることを意味します．
文書の分量が多ければ，書き方マニュアルの分量もばかにならないかもしれません．

**** 数値データが多い
数値データ
当然、どこか別の場所で計算されている
全て、間違いなく書き写すのはとても大変。
最新の値を間違いなく書き写しても、安心はできない。
過去の値が更新される場合もあるから。
**** 図表が多い
きれいに並べるのも一苦労
図表あるところに参照あり
図表が追加・削除されたらどうなるか？
WISIWYG だと重くなる
**** 数値の間違いが許されない
そもそも数値を正確に報告するのが目的である
校閲の責任が重い。
チェックは大変
**** 作業が毎年繰り返される
上記のようなコストを毎年払い続ける
毎年ゼロから作るのはばかばかしい。
かといって、コピペすると、値の修正間違いが生じる可能性がある。
テンプレートを作るといい。
一度作ってしまえば、労力が報われやすい
*** 得られる効果
構造化と自動化の恩恵
**** 変化に強くなる
:PROPERTIES:
:EFFORT:   0:20
:END:
構造化の恩恵
***** 様式は一括指定
様式変更の必要があっても，
文章と，構造を制御部が別れている構造が明確に定義されている．
***** 他の形式への移行も容易
HTMLやXMLで再利用可能
構造化されているので、TeXを捨てることも可能
**** 間違いがなくなる
:PROPERTIES:
:EFFORT:   0:20
:END:
***** プログラム出力を取り込む
計算結果を成果物に記載するには，
- 計算結果を目視して，打ち込む
- 計算結果をコピペする
必要がある．
いずれも，ミスの温床である
***** データの分散を未然に防ぐ
文書を回覧し，ミスが見つかったらどうするか．
WISIWYG形式の文書では，計算ファイルは後回しにして，とりあえず文書の記述のみを訂正することができてしまう
そんなことしない，と思われるかもしれないが，程度の差こそあれ，本質的に同様のことはたびたび見受けられる．
繰り返すと，データが分散していく
どうするか？
TeX
どうなるか？
***** 親ファイルと子ファイルが明確になる
常に，マスターが何であるかを意識
数値のマスターは計算プログラム，
文書のマスターは.texファイル．
***** 元データの変更を即座に反映
計算結果をコンパイル時に読み込み，
計算結果が即座に反映されるようにする．
**** わかりやすくなる
:PROPERTIES:
:EFFORT:   0:20
:END:
文書の変更が恐くない。
雑務が減ったぶん，執筆者は内容について，推敲する時間が増える．
何がベストか？を常に追求できる

**** 機能性が向上する
:PROPERTIES:
:EFFORT:   0:20
:END:
実際にリンクが張られているので，様々な機能が利用可能
***** ジャンプ
***** ページ内プレビュー
画面で閲覧する場合に便利
***** 索引
これがあると文書の価値が飛躍的に向上する非常に労力がかかる
***** リンク付き図表目次
**** もっと学びたい方へ
:PROPERTIES:
:EFFORT:   0:20
:END:
***** バージョン管理
***** 環境統一
***** 自動化
* まとめ [10 分]

** 閉会の挨拶
     * 弘法筆を選ばず
     * 弘法も筆の誤り
     * 私たちは弘法大師にはなれない、ならばいっそ筆を選んでついでに誤りも減らそう
