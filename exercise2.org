#+TITLE: 報告書編集作業の実習2 （事業報告書を TeX で作る）
知彼知己、百戰不殆（彼を知り己を知れば百戦殆ふからず）--孫氏

我々が執筆する文書の一つに，報告書というタイプの文書があります．
報告書は，我々執筆者を悩ませるいくつもの特徴を持っていますが，実はまさにTeXの導入が効果的なタイプの文書です．
まず，水産庁事業「我が国周辺水域の漁業資源評価」の報告書を例として，
報告書によくみられる手強い性質を分析します．
続いて，それらの性質に対する，LaTeX を使ったエレガントな解放を，具体的な実装方法とともに紹介していきます．

* 報告書〜手強いヤツ
報告書には，執筆者にとって負担となる，以下のような特徴があります．
- 分量・執筆者が多い
- 数値データが多く，その間違いが許されない
- 図表が多い
- 相互参照が多い
- 毎年出版される
これらの特徴を持つ文書をWISIWYG環境で作成しようとすると，多くの深刻な問題が生じてしまいます．
本章では，これらの特徴がもたらす具体的な問題を特定し，
それらがTeX の導入によって，どのように改善されるかを見ていきます．
** 報告書の特徴とそれがもたらす具体的問題
*** 分量・執筆者が多い
期待される成果物の分量が多くなるほど，執筆・校閲のコストは当然高くなります．
多くの場合，執筆・校閲にあたる人員を増やして，作業を分担することになるでしょう．
しかし実は，短絡的な増員には弊害もあるのです．

文章のスタイルには個人差があるため，各執筆者が思い思いに書くと，まとまりのない文章になってしまうでしょう．
これに対処するために，編集担当者は，スタイルに関するマニュアルを作ることを思いつくかもしれません．
しかしそれは，執筆担当者に，「マニュアルを読む」という，さらなる労働を課していることを意味します．
文書の分量が多ければ，書き方マニュアルの分量もばかにならないかもしれません．
自分が執筆している個所についての説明が，マニュアルのどこに書いてあるのかを探す，という仕事に対処しなければなりません．
*** 数値データが多く，また間違いが許されない
報告書には，数値データの掲載が付き物です．
生データが掲載される場合には，それらのデータはデータベースから引用されたものでしょう．
また，生データを使った計算結果が掲載される場合もあるでしょう．
これらの数値を全て、間違いなく書き写すのにとても労力がかかることは，容易に想像てきます．
幸い，パソコンのコピー&ペースト機能の普及によって，
手書き〜タイプライター時代の問題であった書き写しの間違いはほぼなくなったといえるでしょう（もっとも，コピー範囲が正しければ，ですが）．
しかし，最新の値を間違いなく書き写しても、まだ安心はできません。
計算ミスの発覚や，元データの訂正によって，引用元の値が更新される場合もあるからです．

我々が作成する報告書は，そもそも数値を正確に報告するのが目的となっていることがほとんどです．
報告書の数値には間違いがあってはなりません．
数値に対する我々の校正は，通常の文書に対する誤字脱字に対する校正以上に，責任の重い作業といえるでしょう．
*** 図表が多い
たくさんの図表を挿入する際にまず問題になるのが，配置・整列です．
全ての図表を，一貫性を保って，あるいは，見た目に美しいように配置するには，相当な労力が必要です．
やっとのことでレイアウトを整えても，意図せぬマウス操作によって崩れてしまう危険性と常に隣り合わせです．
たとえきれいに配置できたとしても，WISIWYG 執筆環境で文書に図表を数多く挿入した場合，
ソフトウェアの動作が緩慢になりがちです．
*** 相互参照が多い
図表を使ってデータを示す場合，それらの参照を示しながら本文を記述する場合が多いでしょう．
図表の加除や順序変更があった場合，図表番号と本文中の参照とを間違いなく修正するには，多大な労力がかかります．

相互参照といえば，引用文献の存在を忘れることはできません．
引用文献を扱う際には，上記の問題に加えて，引用スタイルの一貫性にも注意を払う必要があります．

*** 毎年出版される
組織としての累積コストを考える上で，年次報告書の「毎年繰り返し出版される」という特徴が重要になってきます．
というのも，これまで見てきたような問題の数々に対処することは，労働コストに他なりません．
このコストを，事業が続く限り，毎年払い続けるのは，はたしていかがなものでしょうか．

ひな形の作成は，繰り返し出版される文書のコスト削減に対して，効果的です．
繰り返し使われる回数が多いほど，ひな形作成の費用対効果が大きくなるからです．

しかし，上で見てきたような問題に，Word環境で対処しようとすると，
テンプレート機能だけでは対処できません．
必然的に，昨年の文書を複製し，更新が必要な数値などを手作業で変更してゆくことになります．
** 問題の本質
以上の各問題を分析すると，以下のような本質が見えてきます．
| 問題の本質                                 | 派生する二次的な問題                                     |
|--------------------------------------------+----------------------------------------------------------|
| 内容とレイアウトとの間に直交性がない       | レイアウト作業のコストに重複を生じる，内容に集中できない |
| 自動化の程度が低い                         | ヒューマンエラー混入の余地が大きい                       |
| 生きた相互参照をを実現するための機能が貧弱 | 変更に弱い                                               |
| GUI への依存度が高すぎる                   | 再現性の低さ，動作の緩慢さ，別マニュアルが必要           |

* TeX による実装
ここでは，水産庁の委託事業における[[http://abchan.fra.go.jp/digests2017/details/201726.pdf][カタクチイワシ対馬暖流系群の報告書]] を例として使い，
段階を追って TeX で実装していきます．
** まずは骨格から
*** タイトルと節を配置する                                  :直交性:
報告書を見てみると，まずはじめにタイトルがあり，続いて大きいレベルの見出しとして
- 要約
- まえがき
- 生態
- 漁業の状況
- 資源の状態
- 2018年ABCの算定
- ABC以外の管理方策の提言
- 引用文献
があることがわかります．
この最低限の構造を，LaTeXを使って書いてみましょう．

ただし，以下の2つには，まだ手をつけないでおきましょう．理由を示します．
- 要約: この項目は，「まえがき」「生態」などとは種類が違う，独立した項目のようです
- 引用文献: TeX は引用文献リストを自動生成するので，ここで作成する必要はありません

TeX 形式の原稿は，以下のようになります．
#+BEGIN_SRC latex :tangle ex2/twanchovy.tex
  \documentclass{jsarticle}
  \title{平成30（2018）年度カタクチイワシ対馬暖流系群の資源評価}
  \author{}
  \date{}

  \begin{document}
  \maketitle
  \section{まえがき}
  \section{生態}
  \section{漁業の状況}
  \section{資源の状態}
  \section{2018年ABCの算定}
  \section{ABC以外の管理方策の提言}
  \end{document}
#+END_SRC

おめでとうございます！
この時点で，「内容とレイアウトの直交性」の問題は，もう解決することができました．

この報告書には著者や日付の記載がありませんので，\author と \date は空欄にしておきましょう．


*** タイプセット                                                  :GUI依存:
報告書の構造を入力したら，タイプセットして文書を作ります．
**** \{TEX}Workを使う場合
**** TeXShop を使う場合
執筆に TeXShop を使っている場合，"Typeset"ボタンをクリックするだけで pdf が生成します．
**** コマンドラインから行う場合
上で述べたような統合開発環境には，「Typeset ポタンをクリックする」という GUI 作業が混入しています．
この作業の背後で動いているコマンドをコンソールに直接入力すれば， GUI 作業からいっそう解放されます．

#+BEGIN_SRC sh :results silent
cd ex2/
platex twanchovy
dvipdfmx twanchovy
#+END_SRC

#+BEGIN_SRC sh :results silent
convert -density 300x300 -units PixelsPerInch -crop 1950x1150+280+600 ex2/twanchovy.pdf\
 -alpha off ex2/twanchovy01.png
#+END_SRC
[[./ex2/twanchovy01.png]]

文書ができましたか？
まずは，手強い報告書に立ち向かうための第一歩を踏み出しました．

しかし，この時点で既に1つ，問題があります．
前節で，「毎年出版される」というのが報告書の特徴の一つであると述べましたが，
先程書いた見出しの中には，「2018年」という特定の年が手打ちされています．
この報告書には，年の言及がたくさんあるようですし，まずはミスを減らすためにもこの部分を一般化しておきましょう．

*** かんたんなマクロで毎年使えるようにする
この報告書の執筆当時は2018年，平成30年でした．
これを毎年使えるようにするには，「今年」を，西暦と和暦で定義しておくと便利そうです．
そこで，報告書のプリアンブル
\fn{書く場所はプリアンブル，
つまり\dockmentclass{jsarticle}よりも下，\begin{document}よりも上であればどこでも構いません}
に，以下のように書きます．
#+BEGIN_SRC latex
\newcommand{\ThisYr}{2018}
\newcommand{\ThisYrJP}{30}
#+END_SRC

これで，本文中で \ThisYr などと書いてタイプセットすれば，「2018」が展開されるようになります．
やってみましょう．
#+BEGIN_SRC latex :tangle ex2/twanchovy.tex
\documentclass{jsarticle}
\title{平成\ThisYrJP（\ThisYr）年度カタクチイワシ対馬暖流系群の資源評価}
\author{}
\date{}

\newcommand{\ThisYr}{2018}
\newcommand{\ThisYrJP}{30}

\begin{document}
\maketitle
\section{まえがき}
\section{生態}
\section{漁業の状況}
\section{資源の状態}
\section{\ThisYr 年ABCの算定}
\section{ABC以外の管理方策の提言}
\end{document}
#+END_SRC
*** コラム　【試行錯誤にはアウトライナーを】
TeX は，確かに内容とレイアウトを分離してくれますが，
構造に関する\section{}などの制御文を書くのが面倒，と思われるかもしれません．
事実，面倒です．

この問題は，構造の決まった報告書執筆の際にはあまり問題になりませんが，
論理構造の試行錯誤が必要な，新しい文書の執筆には向きません．
本テキストも，事前に論理構造の試行錯誤が必要だったため，
最初から TeX を使って執筆していたわけではありません
[fn: TeX 普及を目的とする本講習の目的に照らせば，なんだか皮肉ですネ]．

論理構造を吟味する作業に最適なのが，アウトライナーです．
アウトライナーを名乗るソフトウェアは数多くありますが（https://en.wikipedia.org/wiki/Outliner），
みな共通して，試行錯誤を補助する以下のような機能があります．
- 見出しのレベル増減
- 見出しの並べ替え
- 見出しの折りたたみ

その一方で，装飾機能は極限まで削ぎ落とされていることがほとんどです．

この原稿は，[[https://www.gnu.org/software/emacs/][Gnu Emacs]] の [[https://orgmode.org][Org mode]] というアウトライナー機能を使って執筆し，
アウトラインが確定してから，Org mode の エクスポート機能機能を使って TeX 形式に変換しました．

** 図表を挿入しよう
*** 素材の準備
続いて，TeX から図を読み込んで，報告書に配置します．
使用する図を一箇所にまとめると，ディレクトリをきれいに使うことができます．
この講習会のリポジトリの ex2/figs/ に，報告書に使う図を置きました．

#+BEGIN_SRC sh :results scalar :exports both
tree ex2/figs/
#+END_SRC

#+RESULTS:
: ex2/figs/
: |-- age_length.png
: |-- catch.png
: |-- eggp.png
: |-- index_cpue.png
: |-- map.png
: `-- maturation.png
: 
: 0 directories, 6 files

#+BEGIN_SRC latex :tangle ex2/twanchovy.tex
\documentclass{jsarticle}
\usepackage[dvipdfmx, hiresbb]{graphicx, xcolor}
\title{平成\ThisYrJP（\ThisYr）年度カタクチイワシ対馬暖流系群の資源評価}
\author{}
\date{}

\newcommand{\ThisYr}{2018}
\newcommand{\ThisYrJP}{30}

\begin{document}
\maketitle
\section{まえがき}
\section{生態}
\section{漁業の状況}
\section{資源の状態}
\section{\ThisYr 年ABCの算定}
\section{ABC以外の管理方策の提言}

\begin{figure}[htp]
 \begin{minipage}{0.5\hsize}
  \begin{center}
   \includegraphics[width=70mm]{figs/map.png}
  \end{center}
  \caption{カタクチイワシ対馬暖流系群の分布域}
  \label{fig:distrib}
 \end{minipage}
 \begin{minipage}{0.5\hsize}
  \begin{center}
   \includegraphics[width=70mm]{figs/age_length.png}
  \end{center}
  \caption{カタクチイワシの成長様式}
  \label{fig:agelen}
 \end{minipage}
\end{figure}

\end{document}
#+END_SRC

*** 配置のパターンを定義する
1ページに図表何枚など，同じ貼り方が繰り返される場合，
その貼り方にわかりやすい名前をつけて定義してしまうといい．
** 数値データも流し込もう
*** 数値リストの準備
プログラムからcsvで書き出す
*** 流し込む
** 文献リストの準備
.bibtexファイル
** マクロをstyとして書き出す
** 今後の展開
校閲のために考えられうる機能
- 要チェック数値のリストをプログラムから書き出す
- チェック用の.styを定義する
  - マクロ展開部に色付け
  - マクロ展開部にチェックボックス付与
** もっと学びたい方へ
:PROPERTIES:
:EFFORT:   0:20
:END:
*** バージョン管理
Git
*** 環境統一
Docker
*** 継続的インテグレーション
** 付録へ
*** コマンドラインからコンパイル
#+BEGIN_SRC sh
platex report
dvipdfmx report
#+END_SRC

#+BEGIN_SRC sh
ptex2pdf -l report
#+END_SRC
*** 原稿が更新されたら自動コンパイル
.latexmk を作る
#+BEGIN_SRC sh
#!/usr/bin/env perl
$latex            = 'platex -synctex=1 -halt-on-error';
$latex_silent     = 'platex -synctex=1 -halt-on-error -interaction=batchmode';
$bibtex           = 'pbibtex';
$dvipdf           = 'dvipdfmx %O -o %D %S';
$makeindex        = 'mendex %O -o %D %S';
$max_repeat       = 5;
$pdf_mode	  = 3; # generates pdf via dvipdfmx

# Prevent latexmk from removing PDF after typeset.
# This enables Skim to chase the update in PDF automatically.
$pvc_view_file_via_temporary = 0;

# Use Skim as a previewer
$pdf_previewer    = "open -ga /Applications/Skim.app";
#+END_SRC

実行して変更を監視
#+BEGIN_SRC sh
latexmk -pvc report
#+END_SRC
* 本章で学んだこと
報告書の数値のミスをなくすことができた．
軽快な執筆環境を手に入れることができた1
* TODO 要整理の文章
以下は節ではなく，それぞれ適切な場所に散りばめる
** 変化に強い文書
:PROPERTIES:
:EFFORT:   0:20
:END:
構造化の恩恵
*** 様式は一括指定
様式変更の必要があっても，
文章と，構造を制御部が別れている．
構造が明確に定義されている．
*** 他の形式への移行も容易
HTMLやXMLで再利用可能
構造化されているので、TeXを捨てることも可能
** 間違いのない文書
:PROPERTIES:
:EFFORT:   0:20
:END:
*** プログラム出力を取り込む
計算結果を成果物に記載するには，
- 計算結果を目視して，打ち込む
- 計算結果をコピペする
必要がある．
いずれも，ミスの温床である
*** データの分散を未然に防ぐ
文書を回覧し，ミスが見つかったらどうするか．
WISIWYG形式の文書では，計算ファイルは後回しにして，とりあえず文書の記述のみを訂正することができてしまう
そんなことしない，と思われるかもしれないが，程度の差こそあれ，本質的に同様のことはたびたび見受けられる．
繰り返すと，データが分散していく
どうするか？
TeX
どうなるか？
*** 親ファイルと子ファイルが明確になる
常に，マスターが何であるかを意識
数値のマスターは計算プログラム，
文書のマスターは.texファイル．
*** 元データの変更を即座に反映
計算結果をコンパイル時に読み込み，
計算結果が即座に反映されるようにする．
** わかりやすい文書
:PROPERTIES:
:EFFORT:   0:20
:END:
文書の変更が恐くない。
雑務が減ったぶん，執筆者は内容について，推敲する時間が増える．
何がベストか？を常に追求できる

** 機能的な文書
:PROPERTIES:
:EFFORT:   0:20
:END:
実際にリンクが張られているので，様々な機能が利用可能
*** ジャンプ
*** ページ内プレビュー
画面で閲覧する場合に便利
*** 索引
これがあると文書の価値が飛躍的に向上する非常に労力がかかる
*** リンク付き図表目次
** メリット
*** 分量
分量が多いほど，文章の構造化のメリットが大きくなる．
また，テンプレートの作成コストをペイしやすい．
TeX のコメントアウト機能を使うことによって，まさに執筆しようとしている個所についての説明を，
本文中に書き込むことができます．
マニュアルと原稿との間の視線の移動がなくなるわけです．
*** データの正確性
.csv形式などで保存された元データや計算出力をTeX が読み込むように指定しておけば，
コンパイルの度にその数値を展開し，最新の計算結果を反映させることができます．
前項で述べた数値展開を使えば，参照ミスは撲滅できますが，やはり目視でチェックしたくなるのが人間の性というもの．
数値のチェックリストを自動生成するようにしておけば，数値の校正もはかどり，何より安心できます．

*** 図表の挿入
位置を指定して貼れるので再現性がある．
執筆環境は単なるテキストファイルなので，動作が重くなることがない

*** 相互参照
図表番号は自動で振られるので，間違いがない．
加除や順序変更は全く問題ない．
本文から参照する場合，数字ではなく，図表の名で指定できるので，チェックもしやすい．

*** 毎年出版
TeX には，Wordにみられるような，テンプレートという概念は存在しません．
というのも，繰り返し使われることを考慮て組み上げられたTeX システムは，
いつもの執筆環境それ自体が再現性が高いため，そのままいわゆる「テンプレート」としても機能しうるからです．
